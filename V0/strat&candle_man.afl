_SECTION_BEGIN("Combined strategy button trading"); 
EnableTextOutput(False);
SetChartOptions(0, chartShowDates); 
RequestTimedRefresh(1);
Filename = StrLeft(_DEFAULT_NAME(),StrLen(_DEFAULT_NAME())-2);
_N(Title = Filename + StrFormat(" - {{DATE}} \nOpen %g, Hi %g, Lo %g, Close %g (%.1f%%) Vol " + " {{VALUES}}", O, H, L, C, SelectedValue( ROC( C, 1 )) ));
 
VarPfx = "Btn1"; // some var that reflects the trading file

// ####  Parameters   ########################################################################################################
AutoTrade   = ParamToggle("Auto trade", "ON|OFF");
Contracts   = Param("Num contracts", 50, 50, 1000, 5);
//typeOrder = ParamList("Order type", "MKT,STP");
BuyOrder    = ParamTrigger("Place Buy order","BUY");
SellOrder = ParamTrigger("Place Sell order","SELL");
CloseAll  = ParamTrigger("Close all positions","CLOSE ALL");
CancelAll = ParamTrigger("Cancel all pending orders","CANCELL ALL");
Reset       = ParamTrigger("Reset", "RESET"); 
 
 
// #### STRATEGY ################################################################################
//BID-ASK
spread=(GetRTData("Ask")-GetRTData("Bid"));
FQ=spread;
BP=GetRTData("Bid")+FQ*0.25;
SP=GetRTData("Ask")-FQ*0.25;
//

printf("\nMy BUY price"+"\t"+BP);
printf("\nMy SELL price"+"\t"+SP);

/////// CANDLE BASED ////////
/*Against all odds (draft). Written by Thierry HUITEL o-l---} */
/* based on Jim Varney's work-- CANDLESTOCHASTICS-- */
/*and all the amibroker group :-) */

/*
This Exploration is a scan for 24 different buy or sell signals.
The odds are 1 of 6 to get a TWO with a dice. If you try 1000 times, the odds are more than 99%.
The aim of the exploration is to find days when many bullish or bearish signs are triggered at the same time. If 5 indicators give a buy advice, it is more reliable than one.
I invite everybody to add your own systems to these ones, to improve the reliability. And experimented technical analysts could give advices to avoid the trap of using several different indicators all working off the same input data.

Vol Index: this column is the ratio of today's volume to the 14-day average volume.
This column should be sorted Descending. The best signals are occur when VolIndex is at least 2 or higher.

PCL[up]: Piercing Line, "up" signifies Bullish.
MDS[up]: Morning Doji Star
BLE[up]: Bullish Engulfing
HAM[up]: Hammer
BRE[dn]: Bearish Engulfing, "dn" signifies Bearish.
DCC[dn]: Dark Cloud Cover
EDS[dn]: Evening Doji Star
TDREI[up] & [dn]: Tom DeMark's Range Expansion Index 
KUP[up] & [dn]: Keltner Bands -DIMITRIS TSOKAKIS
RSI[up] & [dn]: Relative Strength Index 14 periods
MFI[up] & [dn]: Money Flow Index
ST2[up] & [dn]: Stochastic Slow - Donald Dalley
DIV[up] & [dn]: % R divergence  -DIMITRIS TSOKAKIS
KST[up] & [dn]: MARTIN PRING'S KST MOMENTUM SYSTEM -TJ
COP[up]: Coppock Curve TJ
SMH[up] & [dn]: smash day pattern. DIMA
CHK[up] & [dn]: Chaikin Money Flow. Thierry Huitel

A "1" in the column signifies TRUE, a "0" indicates no signal.
------------------------------------------------------------------*/
"Commentaires sur  " + Name() +" pour le  "+Date();

/* Minimum Price and 14 day Avg Volume Values for Filter */
minPrice = 3;     //change as needed
minVol = 50000;   //change as needed

VolAvg = MA( V, 14 );
VolumeIdx = V / VolAvg;
AvgRange = Sum( abs(O-C),15 )/15;

/* Candle Codes */
White = IIf((C>O) AND ((C-O)>=0.8*(H-L)),1,0) AND (C-O)>AvgRange;
Black = IIf((C<O) AND ((O-C)>=0.8*(H-L)),1,0) AND (O-C)>AvgRange;
Doji  = IIf(abs(O-C)<=0.1*(H-L),1,0);

/* Dark Cloud Cover [Bear] */
DCC = IIf(Ref(White, -1) AND Black AND C<=Ref(((H+L)/2),-1)
	AND O>Ref(C,-1), 1,0);

/* Piercing Line [Bull] */
PL = IIf(Ref(Black, -1) AND White AND C>=Ref(((H+L)/2),-1)
	AND O<Ref(C,-1), 1,0);

/* Evening Doji Star [Bear] */
EDS = IIf(Ref(White, -2) AND Ref(Doji, -1) AND Black AND
	C<=Ref(((H+L)/2),-2), 1,0);

/* Morning Doji Star [Bull] */
MDS = IIf(Ref(Black, -2) AND Ref(Doji, -1) AND White AND
	C>=Ref(((H+L)/2),-2), 1,0);

/* Hammer [Bull] */
HAM = IIf( (H-L > 1.5*AvgRange) AND (C > (H+L)/2)  AND (O > C) AND 
	(VolumeIdx > 2), 1, 0);

/* Bearish Engulfing */
BRE = IIf(Black AND Ref(White, -1) AND (C < Ref(O, -1))  AND (O > Ref(C, -1)), 1,0);

/* Bullish Engulfing */
BLE = IIf(White AND Ref(Black, -1) AND (C > Ref(O,-1))  AND (O < Ref(C,-1)), 1,0);


/* Stochastics 14-4 */

ss = MA(StochK(14),4);
StochBuy = IIf(ss<=20, 1, 0);
StochSell = IIf(ss>=80, 1, 0);

/* TDREI */
HighMom = H - Ref( H, -2 );
LowMom = L - Ref( L, -2 );
Cond1 = ( H >= Ref( L,-5) OR H >= Ref( L, -6 ) ); 
Cond2 = ( Ref( H, -2 ) >= Ref( C, -7 ) OR Ref( H, -2 ) >= Ref( C, -8 ) ); 
Cond3 = ( L <= Ref( H, -5 ) OR L <= Ref( H, -6) ); 	
Cond4 = ( Ref( L, -2 ) <= Ref( C, -7 ) OR Ref( L, -2 ) <= Ref( C, -8 ) );
Cond = ( Cond1 OR Cond2 ) AND ( Cond3 OR Cond4 );
Num = IIf( Cond, HighMom + LowMom, 0 );
Den = abs(  HighMom ) + abs( LowMom );
TDREI = 100 * Sum( Num, 5 )/Sum( Den, 5 ) ;
tdreiBuy = IIf(TDREI<=-95, 1, 0);
tdreiSell = IIf(TDREI>=95, 1, 0);

/* KUP */
KUP=EMA((H+L+C)/3,10)+EMA(H-L,10);
KDOWN=EMA((H+L+C)/3,10)-EMA(H-L,10);
kupBuy = IIf(Cross(C,KDOWN), 1, 0);
kupSell = IIf(Cross(KUP,C), 1, 0);

/*RSI*/
vrsi= RSI(14);
rsiBuy = IIf(Cross(vrsi,30), 1, 0);
rsiSell = IIf(Cross(70,vrsi), 1, 0);

/*MFI*/
mfiBuy = IIf(Cross(MFI(),30), 1, 0);
mfiSell = IIf(Cross(70,MFI()), 1, 0);

/*STO2*/
lookback = 14;
buyrange = 30;
sellrange = 70;
stochKworkaround = StochK(14);
stochDworkaround = EMA( StochD(14), 5);
sto2Buy = IIf(StochD(14) < buyrange AND Cross(stochKworkaround, stochDworkaround), 1, 0);
sto2Sell = IIf(StochD(14) > sellrange AND Cross(stochDworkaround, stochKworkaround), 1, 0);

/* %R, ema 9 and divergences */

R=-100*((HHV(High,14)-Close))/(HHV(High,14)-LLV(Low,14));
DIVR=(R-Ref(R,-1))*(C-Ref(C,-1));
DIVB=IIf((DIVR<0) AND (R-Ref(R,-1))>0 AND (Ref(R,-1)<-90),-100,0);
DIVB1=IIf((DIVR<0) AND (R-Ref(R,-1))>0 AND (Ref(R,-1)<-90),-80,0);
DIVS=IIf((DIVR<0) AND (R-Ref(R,-1))<0 AND (Ref(R,-1)>-10),-20,0);
divBuy = IIf(DIVB==-100, 1, 0);
divSell = IIf(DIVS==-20, 1, 0);

/*KST*/

KST =  (MA(ROC(Close,10),10) * 1) +
            (MA(ROC(Close,15),10) * 2) +
            (MA(ROC(Close,20),10) * 3) +
            (MA(ROC(Close,30),15) * 4);
kstBuy = IIf(Cross(KST ,  MA(KST, 109)), 1, 0);
kstSell = IIf(Cross(MA(KST , 120), KST), 1, 0);

/*COP*/
copBuy = IIf((EMA( ROC( MA( C, 22 ), 250 ), 150 ) / 100) < 0, 1, 0);

/*SMASH*/
numDays = 3; // Consider smash Day if closed above/below previous numDays highs/lows
closeInDayRangePct = 0.25; // Smash day close should be in the high/low %% of the day range
smashDayDown = Close < LLV (Ref (Low, -1), numDays) AND Close < Open AND Close < (Low + closeInDayRangePct * (High - Low));
smashDayUp = Close > HHV (Ref (High, -1), numDays) AND Close > Open AND Close > (High - closeInDayRangePct * (High - Low));
// Enter in the direction opposite to the smash day if the very next day price moves opposite the smash day.
smashBuy = IIf(Ref (smashDayDown, -1) AND High > Ref (High, -1), 1, 0);
smashSell = IIf(Ref (smashDayUp, -1) AND Low < Ref (Low, -1), 1, 0);

/*CHAIKIN MONEY FLOW*/
ICH = Sum(((( C-L )-( H-C )) / ( H-L ))*V, 21 ) / Sum(V,21); 
LCH = LLV( ICH, 255 );
top = (LCH/2);
chkBuy = Cross (ICH, top);
chkSell = Cross (0, ICH);

/*number of buy signals --- give weight to your favorite ones with a coefficient. */
somme= PL + MDS + HAM + BLE + tdreiBuy + kupBuy + rsiBuy + (2*mfibuy) + sto2Buy + (2*divBuy) + kstBuy + copBuy + (2*smashBuy) + chkBuy;

/*number of sell signals. */
somme2 = BRE + DCC + EDS + tdreiSell + kupSell + rsiSell + mfiSell + sto2Sell + divSell + divSell + kstSell + smashSell + chkSell;

/*Guru comment*/
"number of buy indicators triggered: " + WriteVal (somme) ;
"Aujourd'hui, les signaux haussiers suivants ont été déclenchés: ";


/* Buy and Sell */
/* set your own requirements: how many indicators triggered at the same time */

WriteVal (somme);


Buy=somme>=6;
//(bu1 OR bu2 OR bu3 OR bu5 OR bu6 OR bu7 OR bu8 OR bu9 OR bu10);
Sell=somme2>=3;
//(se1 OR se2 OR se3 OR se5 OR se6 OR se7 OR se8 OR se9 OR se10);
//Buy=ExRem(Buy,Sell);
//Sell=ExRem(Sell,Buy);

// ####  Plot indicators and shapes  ##########################################################################################
Plot(C, "Combined Strategy ## S1 to S10", colorWhite, 4);
PlotShapes( Buy* shapeUpArrow , colorGreen, 0);
PlotShapes( Sell* shapeDownArrow , colorRed, 0);  
 

// ####  Static vars reset   ##################################################################################################
if( reset OR Nz(StaticVarGet(varPfx  + "Init") == False) )
{
    StaticVarSetText(varPfx  + "orderID", "");
    StaticVarSetText(VarPfx + "lastTrade", ""); 
    StaticVarSet(VarPfx + "numPositions", 0);
    _TRACE("# init, " + NumToStr(StaticVarGet(varPfx  + "num"), 1.0));
}
 

 
// ####  Trading section ########################################################################################################
 
if(autotrade) 
{
    ibc = GetTradingInterface("IB");
    ConnectedStatus = ibc.IsConnected();    // get the connection status, 2 is OK
	averageprice=0;
	position=0;
	totalposition=0;
	execinfo="";
	positioninfo="";
	pendinginfo="";
	OrderID = StaticVarGetText( "OrderID" );
	OrderStatus = ibc.GetStatus( OrderID, True );
	LastTWSMsg = ibc.getLastError( OrderID );
	Title = "Last TWS Error Msg: " + LastTWSMsg + "\n" ;

    // this is where the trade processing is done
    if( ConnectedStatus == 2 OR ConnectedStatus == 3) // connected to TWS with no error messages
    {
        OrderID = StaticVarGetText(VarPfx + "OrderID");
        OrderStatus = ibc.GetStatus( OrderID, True );
        oldNumPositions = StaticVarGet(VarPfx + "numPositions");
        numPositions  = ibc.GetPositionSize(Name()); 
        StaticVarSet(VarPfx + "numPositions", numPositions  );
        LastTrade = StaticVarGetText(VarPfx + "lastTrade"); 
        _TRACE("# buy, positions = " + NumToStr(numPositions, 1.0) + ", last trade = " + LastTrade + ", OID = " + OrderID);
 
        if(  ( LastTrade == "Buy" AND numPositions  > oldNumPositions )  OR
             ( LastTrade == "Sell" AND numPositions  < oldNumPositions )     OR
             ( LastTrade == "Close" AND numPositions  == 0)                     )
        {
            
            OrderID = StaticVarSetText(VarPfx + OrderID, "");
        }
        else if (OrderStatus == "Cancelled")
            OrderID = StaticVarSetText(VarPfx + OrderID, "");
            
         //This code to get the portfolio 
		openpos = ibc.GetPositionList(); 
		for( i = 0; ( symbol = StrExtract( openpos, i ) ) != ""; i++ ) 
		{ 
			if(symbol==Name())
			{
			positioninfo=positioninfo+"Position " + i + "\tSymbol: " + symbol + "\tSize: " + ibc.GetPositionSize( symbol ) + "\n" + "\tAvg Price: " + ibc.GetPositionInfo(symbol, "Avg. cost") +"\n" ; 
			position  = ibc.GetPositionSize(symbol); 
			aprice = ibc.GetPositionInfo(symbol, "Avg. cost");
			averageprice=aprice; 
			totalposition=totalposition+position;
			} 
			_TRACE( positioninfo );
		}
 
		symbols = ibc.GetPendingList( 1, "Pending" ); // returns comma separated list of SYMBOLS that have pending orders
		for( i = 0; ( symbol = StrExtract( symbols, i ) ) != ""; i++ ) 
		{ 
			if(symbol==Name())
			{
			pendinginfo=pendinginfo+"\nPosition " + i + "\tSymbol: " + symbol + "\tSize: " + ibc.GetPositionSize( symbol ) + "\n" + "\tAvg Price: " + ibc.GetPositionInfo(symbol, "Avg. cost") +"\n" ;  
			}
			_TRACE( pendinginfo );
		} 
		
		execlist = ibc.GetExecList(0,""); 
		for( i = 0; ( OID = StrExtract( execlist, i ) ) != ""; i++ ) 
		{ 
			if(ibc.GetExecInfo( OID, "Symbol" )==Name())
			{
			execinfo = execinfo + "\n"+OID + "\t"+ibc.GetExecInfo( OID, "Symbol" ) + "\t"+ ibc.GetExecInfo( OID, "Filled" ) + "\t" + ibc.GetExecInfo( OID, "Avg. price" ) + "\n"; 
			}
			_TRACE( execinfo );
  		}
        
             
        if( BuyOrder )
       {
            
            OrderID = ibc.ModifyOrder( OrderID, Name(), "Buy",Contracts, "LMT", BP, 0, "Day",True );
            StaticVarSetText(VarPfx + "OrderID", OrderID);
            StaticVarSetText(VarPfx + "lastTrade", "Buy"); 
            _TRACE("# buy, positions = " + NumToStr(numPositions, 1.0));
       }
 
        if( SellOrder )
        {
           
            OrderID = ibc.ModifyOrder( OrderID, Name(), "Sell",Contracts, "LMT", SP,0, "Day", True );
            //OrderID = ibc.PlaceOrder( Name(), "Sell", Contracts, typeOrder , 0,SP, "GTC", True);
            StaticVarSetText(VarPfx + "OrderID", OrderID);
            StaticVarSetText(VarPfx + "lastTrade", "Sell"); 
            _TRACE("# sell, positions = " + NumToStr(numPositions, 1.0));
        }
        
       
        else if( CloseAll  )
        {
            
            ibc.CancelAllPendingOrders( );
            ibc.CloseAllOpenPositions();
            StaticVarSetText(VarPfx + "lastTrade", "Close"); 
            _TRACE("# close, positions = " + NumToStr(numPositions, 1.0));
        }
        else if( CancelAll )
        {
            
            ibc.CancelAllPendingOrders( );
            _TRACE("# cancel, ");
        }
        
		LastTWSMsg = ibc.getLastError( 0 );
		
    // the following will display in the interprettion window
        printf("\nOrder type: " + LastTrade +
        "\nOrder Status: " + OrderStatus + 
        "\nOrder ID: " + StaticVarGetText(VarPfx + "OrderID") + 
        "\nNum positions: " + NumToStr(ibc.GetPositionSize( Name() ),1.0,False) +
        "\nAverage Price"+averageprice +
        "\nLast TWS Msg: " + LastTWSMsg );
        
        printf("Size: "+ totalposition+"\tAvg Price: " +averageprice+"\n" + "\tTRADE INFO" +execinfo+"\n"+"\tPENDING INFO" +pendinginfo+"\n"+ "\tPosition INFO" +positioninfo+"\n");
        
         
     }
    else // ConnectedStatus == 0 OR ConnectedStatus == 1, lost connection
    {
        // handle commection errors 
        if(ConnectedStatus == 0) stat = "Not Connected."; else if(ConnectedStatus == 1) stat = "Lost Connection.";
        SetChartBkColor( colorYellow);      
    // the following will display in the interprettion window
        printf("\nTWS Status: " + stat + "\n"); 
    }
} // end auto trading loop
else
{
    SetChartBkColor( colorBlue);
    // the following will display in the interprettion window
    printf("\n1. Autotrading is turned off\n" + "2. TWS not started." );
}
 
_SECTION_END();
