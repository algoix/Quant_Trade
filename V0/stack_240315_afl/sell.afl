//http://www.amibroker.com/kb/tag/exploration/
//http://www.amibroker.com/guide/afl/staticvargetrankedsymbols.html
//http://www.amibroker.com/kb/category/afl/explorations/
//http://www.amibroker.com/kb/2006/03/04/how-to-export-quotations-from-amibroker-to-csv-file/
_SECTION_BEGIN("Only_Sell");

AutoTradingParam = True;        
SubmitOrders = True;            
Tracing = False;
/*MarketOpen = 000000;//09:30:00;
MarketClose = 235959;//04:00:00 
MarketON = TimeNum() >= MarketOpen AND Now( 4 ) < MarketClose;
MarketOFF = Now( 4 ) >= MarketClose ;//day's over*/

BaseRiskPcnt = 1.00;    
AccountCutout = 10000;  

//ABName = StrMid(Name(),0,3) + StrMid(Name(),4,3);
ABName=getfndata("Alias");
IBName =getfndata("Alias");
	
AutoTrading = StaticVarGet("AutoTrading"+ABName);
if( IsNull( AutoTrading ) ) 
	StaticVarSet("AutoTrading"+ABName,0);

if ( AutoTrading==0 && AutoTradingParam )
    StaticVarSetText("OrderID"+ABName,"");

if ( AutoTrading && AutoTradingParam==0 )
    StaticVarSetText("OrderID"+ABName,"");

if (AutoTradingParam) 
	StaticVarSet("AutoTrading"+ABName,1);
else  
	StaticVarSet("AutoTrading"+ABName,0);

AutoTrading = StaticVarGet("AutoTrading"+ABName);
 
Filename 	= _DEFAULT_NAME();
//////BID-ASK
spread=(GetRTData("Ask")-GetRTData("Bid"));
FQ=spread;
BuyP=GetRTData("Bid")+FQ/5;//easy to buy
SellP=GetRTData("Ask")-FQ/5;

//Strategy#####################################################
SetBarsRequired( 400, 0 );
bi = BarIndex();
AvgPrice = ( O + H + L + C ) / 4;  
ND = Day() != Ref(Day(), -1);
newPeriod = Day() != Ref( Day(), -1 );
day_open_time = 1 + BarsSince( Day() != Ref(Day(), -1));
bi = BarIndex();        // Just shorthand
StartBar = StrToNum("2");   //1st bar == 0. Set to 1 so Ref(xxx, -1) doesn't give an error
EndBar = BarCount -1;
ExtraBarsRequired = 0;

O1 = Ref(O,-1);O2 = Ref(O,-2);
	H1 = Ref(H,-1);H2 = Ref(H,-2);
	L1 = Ref(L,-1);L2 = Ref(L,-2);
	C1 = Ref(C,-1);C2 = Ref(C,-2);
myrsi=RSI(14);// 80 sell , 20 buy
myroc=ROC(C,12);
Cond8 = ( Cross( Signal( 12, 26, 9 ), MACD( 12, 26 ) ) )OR    MACD( 12, 26 ) > Ref( Signal( 12, 26, 9 ) * -2, -1 );
Cond9=  Cross( StochD( 14, 3, 3 ), StochK( 14, 3 ) );
Cond10=Cross( ADX( 14 ), PDI() )OR  Cross( MDI(), PDI() ) OR Cross( MDI(),ADX( 14 ) )OR( (PDI()>MDI()) OR (PDI()>ADX(14)))OR MDI()<ADX( 14 ) >PDI() ;
Cond11 = ROC( Close, 10 ) < 25  AND RSIa( Close, 14 ) < 70 AND  CCIa( Close, 14 ) < 100;

Cond12 =  (O>C AND H==O AND C>L) OR(O>C AND (O-C)/(.001+H-L)>.6) OR (O>C AND (H==O AND
C==L) OR (O>C AND C==L)OR( C>O AND C==H)OR(((H-L)>4*(O-C)) AND ((H-C)/(.001+H-L)>= 0.75) AND ((H-O)/(.001+H-L))>= 0.75)); 

ZZPercent=0.6;
ZZ=Zig(C,ZZPercent);
ZZbottom=(ZZ<Ref(ZZ,-1)) AND (ZZ<Ref(ZZ,1));
ZZtop=(ZZ>Ref(ZZ,-1)) AND (ZZ>Ref(ZZ,1));
ExitZscorelookback=5;
ZScore=(C-MA(C,ExitZscorelookback))/StDev(C,ExitZscorelookback);

percdiff = 0.6; /* peak detection threshold */
PK= Peak( H, percdiff, 1 ) == High;
TR= Trough( L, percdiff, 1 ) == Low;

xTr1 = ValueWhen( Tr, L, 1 );
xTr2 = ValueWhen( Tr, L, 2 );
xTr3 = ValueWhen( Tr, L, 3 );
xTr4 = ValueWhen( Tr, L, 4 );
xPK1=ValueWhen(PK,H,1);
xPK2=ValueWhen(PK,H,2);
xPK3=ValueWhen(PK,H,3);
xPK4=ValueWhen(PK,H,4);
valB=valuewhen(ZZbottom,C,1);
valT=valuewhen(ZZtop,C,1);
val=valuewhen(ZZbottom,C,1);
downup=IIf(xTr1>xTr2 and C>xTr1 AND xTr2<valB,1,0);
topdown=iif(xPK1<xPK2 and C<xPK1 AND xPK2>valT,1,0);
//

function Support(p)
{
sup = LLV(low, p);
sup[0] = low[0];
p = min(p,BarCount); 
for (i = 1; i < p; i++)
{
if(low[i] < sup[i-1]) sup[i] = low[i];
else sup[i] = sup[i-1];
}
return sup;
}

function Resistance(p)
{
res = HHV(high, p);
res[0] = high[0];
p = min(p,BarCount); 
for (i = 1; i < p; i++)
{
if(high[i] > res[i-1]) res[i] = high[i];
else res[i] = res[i-1];
}
return res;
}

function OptimizeNot(a1, a2, a3, a4, a5)
{
return a2;
}

/*==============================================================================
Entry and Exit Rules
==============================================================================*/
fast = 5;
slow = 15;
FastRes = Resistance(fast);
FastSup = Support(fast);
SlowRes = Resistance(slow);
SlowSup = Support(slow);
heat = 0.05;

///
periods =15;
Percent = 5;
DaysBack = 0; 
RABars = 0; //initialize
TotalBars = cum(1); //how many bars in database
FinalBar = lastvalue(TotalBars);//number value of last bar
EndDay = FinalBar - DaysBack;//for other than 0 DaysBack
StartDay = EndDay - periods+1;//starting point for line
Master1 = iif(TotalBars >= StartDay and TotalBars <= EndDay,1,0);//defined period
RABars = iif(Master1,ref(RABars,-1)+1,0); // daily counter in defined period
RABarKntr = iif(Master1,sum(RABars,periods),0); //Sum of daily counts

/*  Regression Analysis Computations  */
TempMeanX = iif(RABarKntr == periods,sum(RABarKntr,periods),0);  // Sum of individual day counters
MeanX1 = hhv(TempMeanX,TotalBars)/periods;  //  Final number divided by number of days
MeanX = lastvalue(MeanX1); 
TempMeanY =  iif(RABarKntr == periods, sum(c,periods),0);
MeanY1 = hhv(TempMeanY,TotalBars)/periods ;  //  Final sum  divided by number of days
MeanY = lastvalue(MeanY1);  
Slope1 = iif(TotalBars == EndDay,linregslope(c,periods),0);
Slope2 = iif(hhv(Slope1,FinalBar)>=0,hhv(slope1,FinalBar),llv(Slope1,FinalBar));
slope = lastvalue(Slope2);
Intercept = MeanY -Slope * MeanX;

/*  Linear Regression Line = Intercept plus the Slope times RABarKntr  */
LRLine = Intercept + Slope * RABarKntr; 
///



//bottomline=C<xTr2*1.02 AND C<val*1.03 AND xTr1<xTr2*1.01 AND downup AND ((Cond1 AND Cond2 AND Cond3 AND Cond5) OR Cross(OBV(),MA(OBV(),60)));//bottom line lower than support line considerable when prices breaks support line
sellline=C<xTr2 AND C<valB AND C<LastValue(LRLine)*0.995 AND C<LastValue(SlowSup) AND Cond8 AND cond9 AND  cond10 AND Cond11 AND Cond12; 
sellwarning=xTr2*1.02 AND C<val*1.003 AND xTr1<xTr2*1.01 AND downup AND !GapDown();
//ATR to add

watchlistH=InWatchList(13);
sellpoint = (C<ValueWhen(sellline,C,1) OR C<ValueWhen(sellwarning,C,1));// AND sellline AND C<ValueWhen(sellwarning,C,1); //ValueWhen(bottomline,C,1)>ValueWhen(bottomline,C,2) 


//Plot(C, "", IIf( C > O, colorGreen, colorRed ), styleCandle );


Buy=0;//AND C>Ref(C,-1) // AND C>O
Short=0;
ShortPrice =0; //Or as appropriate for your trading rules.
BuyPrice = 0; //Or as appropriate for your trading rules.
Sell=watchlistH AND sellpoint;
Cover=buy;
//Plot(C , "algotrade ", colorBlue, styleLine);
//Plot(x_est, "Kalman Filter", colorBlack, styleLine|styleThick);
//Plot(C, "", IIf( C > O, colorBlue, colorLightOrange ), styleLine );
//PlotShapes( Buy* shapeUpArrow , colorGreen, 0);
//PlotShapes( Short* shapeDownArrow , colorRed, 0); 


 
/////////////////// Automation Code //////////////////

// First check if we've just started a new bar. THIS CODE RELIES ON PREFERENCES/INTRADAY SET TO START OF INTERVAL.

PrevDT = StaticVarGet("DateTime"+ABName);
DT = LastValue(DateTime());
NewBar = DT != PrevDT;                        
StaticVarSet("DateTime"+ABName,DT);

if( NewBar )
    StaticVarSetText("OrderID"+ABName,"");
 
LastBuy = LastValue(Buy);
LastSell = LastValue(Sell);
LastShort = LastValue(Short);
LastBuyPrice=LastValue(BuyPrice);



Filter=Sell; //AND watchlistcheck ;

IBPosSize=0;

ibc = GetTradingInterface("IB");
IBcStatus = ibc.IsConnected();

IBcStatusString = WriteIf(IBCStatus==0,"TWS Not Found",WriteIf(IBCStatus==1,"Connecting to TWS",WriteIf(IBCStatus==2,"TWS OK",WriteIf(IBCStatus==3,"TWS OK (msgs)",""))));

// Work out how much money there is and adjust risk size




OldOrderID = StaticVarGetText("OrderID"+ABName);
if (AutoTrading == 0 && OldORderID == "" && (LastBuy || LastShort))
{
    // If there would have been an order during Autotrading, then create a dummy OID to test all other code paths
    // e.g. logging, explore output etc.
    StaticVarSetText("OrderID"+ABName,"DUMMY");
}

if( IBcStatus AND AutoTrading )
{
    OrderID = StaticVarGetText("OrderID"+ABName);
    BuyPending=ibc.IsOrderPending(OrderID);
    SellPending=ibc.IsOrderPending(OrderID);
    averageprice=0;
    IBPosSize = ibc.GetPositionSize( IBName );
	// Only enter once the price moves in my desired direction, otherwise wait until next run of the exploration 	//     and check again, and again., ...
    openpos = ibc.GetPositionList();   
        for( i = 0; ( symbol = StrExtract( openpos, i ) ) != ""; i++ ) 
		{ 
			if(symbol==getfndata("Alias"))
			{
			aprice = ibc.GetPositionInfo(symbol, "Avg. cost");
			averageprice=aprice; 
			} 
		}

  
 //  if(( LastValue(C)>(averageprice*1.015) OR LastValue(C)<(averageprice*0.99)) AND OrderID == "" AND ibc.GetPositionSize(Name())>0)
  if( LastSell AND LastValue(C)<(averageprice*0.99)  AND OrderID == "" AND ibc.GetPositionSize(getfndata("Alias"))>0)
    {
		OID = ibc.PlaceOrder(getfndata("Alias"), "Sell",IBPosSize, "MKT",LastValue(C), 0, "Day",True );
	
        for (dummy=0; dummy<40; dummy++)   ibc.Sleep(50);  //Usually takes up to about a second for TWS to get acknowledgement from IB
        StaticVarSetText("OrderID"+ABName,OID);
        if (SubmitOrders)
        {
            //Usually takes about a second for TWS to get acknowledgement from IB, so delay for 2 secs for safety
            for (dummy=0; dummy<40; dummy++)   ibc.Sleep(50);  

            tradetime=GetPerformanceCounter()/1000; 
            while ((GetPerformanceCounter()/1000 - tradetime) <3) // give up after 5 seconds
            {
                ibc.Reconnect();  //Refreshes ibc, and gets accurate status
                ORderStatus = ibc.GetStatus( OID, True);
                if (ORderStatus == "PreSubmitted" || ORderStatus == "Submitted"|| ORderStatus == "Filled")
                    break;
            }
        }
    }
     
      // Note LastOrderID will remain "" while waiting for price improvement so we may skip entering for the whole of the bar
    LastOrderID = StaticVarGetText("OrderID"+ABName);

    ORderStatus = ibc.GetStatus( LastOrderID , True );
    if( ORderStatus != "" ) StaticVarSetText("OrderStatus"+ABName,ORderStatus);
}
else IBPosSize = 0;
 
LastOrderID = StaticVarGetText("OrderID"+ABName);
ORderStatus = StaticVarGetText("OrderStatus"+ABName);
Title = Filename+":"+ABName+"\n"+" Trading Mode:"+WriteIf( AutoTrading,"ON"+WriteIf( SubmitOrders," -Create and Transmit"," - Create Only"),"OFF")+"\n"+" Last Signal: "+WriteIf(LastBuy,"BUY",WriteIf
(LastShort,"SHORT","NoSignal"))+"\n"+" IB Status: "+IBcStatusString+"\n"+" Last OrderID:"+LastOrderID+","+"\n"+" OrderStatus:"+ORderStatus+WriteIf(ORderStatus=="Error",ibc.GetLastError( LastOrderID
),"")+"," + "LastTime:  "+DateTimeToStr(LastValue(DateTime()))+"\n";
AddTextColumn(FullName(),"name",200);

AddColumn(IIf(AutoTrading,Asc("Y"),Asc("N")),"AT",formatChar);
AddColumn(IIf(SubmitOrders,Asc("Y"),Asc("N")),"Transmit",formatChar);

AddColumn(C,"Close",1.2,ColorGreen);
//AddTextColumn(FullName(),"name",200);
AddColumn(ValueWhen(sellline,C,1),"Sell Line");
AddColumn(ValueWhen(sellwarning,C,1),"Warning Line",1.2);
//AddColumn((xTr1+val)/2,"BottomPoint",1.2);
//AddColumn((xPK1+valT)/2,"PeakPoint",1.2);
AddTextColumn(IBcStatusString,"IBC Status",1.0);
AddTextColumn(LastOrderID,"LastOID",1.0);
AddTextColumn(ORderStatus,"OrderStatus",1.0);

if ( ORderStatus=="Filled")    // No order previously in place for this bar, this execution created one
{
	fh = fopen( "TWSTrade.log", "a"); //a = appending not w( writing) or r(reading)
	if( fh ) 
	{ 
		fputs( Now(), fh ); 
		fputs( ", ", fh );

		fputs( "Ticker: ", fh );

		fputs( IBName, fh );
		fputs( ", ", fh );
	
	  

		if (LastSell) fputs( "Sell loss, ", fh);
		//else if (LastShort) fputs( "Short, ", fh);
		
		
		fputs( "LastOID: ", fh );
		fputs( LastOrderID, fh );
		fputs( ", ", fh);

		fputs( "\n", fh );
		fclose( fh ); 
	} 
}


_SECTION_END();
