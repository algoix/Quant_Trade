_SECTION_BEGIN("CLICK"); 
EnableTextOutput(False);
SetChartOptions(0, chartShowDates); 
RequestTimedRefresh(1);
Filename = StrLeft(_DEFAULT_NAME(),StrLen(_DEFAULT_NAME())-2);
_N(Title = Filename + StrFormat(" - {{DATE}} \nOpen %g, Hi %g, Lo %g, Close %g (%.1f%%) Vol " + " {{VALUES}}", O, H, L, C, SelectedValue( ROC( C, 1 )) ));
 
VarPfx = "Btn1"; // some var that reflects the trading file

// ####  Parameters   ########################################################################################################
AutoTrade   = ParamToggle("Auto trade", "ON|OFF");
CloseAll  = ParamTrigger("Close all positions","CLOSE ALL");
CancelAll = ParamTrigger("Cancel all pending orders","CANCELL ALL");
Reset       = ParamTrigger("Reset", "RESET"); 
 
 
// #### STRATEGY ################################################################################
 
//BID-ASK
spread=(GetRTData("Ask")-GetRTData("Bid"));
FQ=spread;
BP=GetRTData("Bid")+FQ*0.25;
SP=GetRTData("Ask")-FQ*0.25;
//STRATEGY
Index="NDX-NASDAQ-IND-USD";
P=Foreign(Index,"C",1);
pi = 4 * atan( 1 );
RTD = 180 / pi;
DTR = pi / 180;
r=ln(O/Ref(O,-15));
z=(O-MA(O,15))/(StdErr(O,15)*sqrt(15));
m=(H+C+O+L)/4;
std=(m-MA(m,15))/(Stderr(m,15)*sqrt(15));
CS = LinRegSlope(m, 15);
CI=LinRegIntercept(m, 15);
y=m-(CI+CS*m);
aa = LinRegIntercept(r,15); 
bb = LinRegSlope(r,15);
CHL = Max(C,15 )-Min(C,15);
OHL = Max(O,15)-Min (O,15);
MAH = MA(Max(15,O ),5);
MAL = MA(Min(15,O ),5);
spread = MAH - MAL;
CS = LinRegSlope(O,15 );
CI=LinRegIntercept(O,15);
y=CI+CS*Ref(O,-1);
function TTF( periods )
{
	BuyPower = HHV( High, periods ) - Ref( LLV( Low, periods ), -periods );
	SellPower = Ref( HHV( High, periods ), -periods ) - LLV( Low, periods );
	return 100 * (BuyPower - SellPower) / (0.5 * (BuyPower + SellPower));
}
s1=atan(r)*DTR;
s2=atan(z)*DTR;
s5=atan(std)*DTR;
s3=r-(aa + bb *Ref(r,-1)); 
s4=CHL/OHL;
s6=(spread-MA(spread,5))/(Stderr(spread,5)*sqrt(5));
s7=y-C;
s8=(y-MA(y,30))/(StdErr(y,30)*sqrt(15));
s9=Correlation(P,C,15)-Ref(Correlation(P,C,15),-5);
s10= TTF(15);

bu1=Cross(LLV(s1,30)*0.99,s1);
bu2=Cross(LLV(s2,30)*0.99,s2);
bu3=Cross(LLV(s3,30)*0.99,s3);
bu4=Cross(0.9985,s4);
bu5=Cross(LLV(s5,30)*0.99,s5);
bu6=Cross(LLV(s6,30)*0.99,s6);
bu7=Cross(LLV(s7,30)*0.99,s7) ;
bu8=Cross(LLV(s8,30)*0.99,s8); 
bu9=Cross(LLV(s9,30)*0.99,s9); 
bu10=Cross(LLV(s10,30)*0.99,s10);

se1=Cross(s1,HHV(s1,30)*0.99) ;
se2=Cross(s2,HHV(s2,30)*0.99);
se3=Cross(s3,HHV(s3,30)*0.99);
se4=Cross(s4,1.0015);
se5=Cross(s5,HHV(s5,30)*0.99);
se6=Cross(s6,HHV(s6,30)*0.99);
se7=Cross(s7,HHV(s7,30)*0.99);
se8=Cross(s8,HHV(s8,30)*0.99);
se9=Cross(s9,HHV(s9,30)*0.99);
se10=Cross(s10,HHV(s10,30)*0.99);


//printf("\nBuy Points\n"+b1+"\t "+b2+"\t "+b3+"\t "+b4+"\t "+b5+"\t "+b6+"\t "+b7+"\t "+b8+"\t "+b9+"\t "+b10);
printf("\nSell Points\n"+s1+"\t "+s2+"\t "+s3+"\t "+s4+"\t "+s5+"\t "+s6+"\t "+s7+"\t "+s8+"\t "+s9+"\t "+s10);
printf("\nMy BUY price"+"\t"+BP);
printf("\nMy SELL price"+"\t"+SP);

Buy=bu4 OR bu6 OR bu8;
//(bu1 OR bu2 OR bu3 OR bu5 OR bu6 OR bu7 OR bu8 OR bu9 OR bu10);
Sell=se5 OR se3;
//(se1 OR se2 OR se3 OR se5 OR se6 OR se7 OR se8 OR se9 OR se10);
//Buy=ExRem(Buy,Sell);
//Sell=ExRem(Sell,Buy);

lastbuyval=LastValue(BP);
lastsellval=LastValue(SP);
printf("\nMy last BUY point's price"+"\t"+lastbuyval);
printf("\nMy last SELL point's price"+"\t"+lastsellval);

 
// ####  Plot indicators and shapes  ##########################################################################################
Plot(C, "Combined Strategy ## S1 to S10", colorBlue, 4);
PlotShapes( Buy* shapeUpArrow , colorGreen, 0);
PlotShapes( Sell* shapeDownArrow , colorRed, 0);  
// ####  Static vars reset   ##################################################################################################
if( reset OR Nz(StaticVarGet(varPfx  + "Init") == False) )
{
    StaticVarSetText(varPfx  + "orderID", "");
    StaticVarSetText(VarPfx + "lastTrade", ""); 
    StaticVarSet(VarPfx + "numPositions", 0);
    _TRACE("# init, " + NumToStr(StaticVarGet(varPfx  + "num"), 1.0));
}
 

 
// ####  Trading section ########################################################################################################
 
if(autotrade) 
{
    ibc = GetTradingInterface("IB");
    ConnectedStatus = ibc.IsConnected();    // get the connection status, 2 is OK
    
 averageprice=0;
position=0;
totalposition=0;
execinfo="";
positioninfo="";
pendinginfo="";
OrderID = StaticVarGetText( "OrderID" );
OrderStatus = ibc.GetStatus( OrderID, True );
LastTWSMsg = ibc.getLastError( OrderID );
Title = "Last TWS Error Msg: " + LastTWSMsg + "\n" ;


 
    // this is where the trade processing is done
    if( ConnectedStatus == 2 OR ConnectedStatus == 3) // connected to TWS with no error messages
    {
        OrderID = StaticVarGetText(VarPfx + "OrderID");
        OrderStatus = ibc.GetStatus( OrderID, True );
        oldNumPositions = StaticVarGet(VarPfx + "numPositions");
        numPositions  = ibc.GetPositionSize(Name()); 
        StaticVarSet(VarPfx + "numPositions", numPositions  );
        LastTrade = StaticVarGetText(VarPfx + "lastTrade"); 
        _TRACE("# buy, positions = " + NumToStr(numPositions, 1.0) + ", last trade = " + LastTrade + ", OID = " + OrderID);
 
        if(  ( LastTrade == "Buy" AND numPositions  > oldNumPositions )  OR
             ( LastTrade == "Sell" AND numPositions  < oldNumPositions )     OR
             ( LastTrade == "Close" AND numPositions  == 0)                     )
        {
            
            OrderID = StaticVarSetText(VarPfx + OrderID, "");
        }
        else if (OrderStatus == "Cancelled")
            OrderID = StaticVarSetText(VarPfx + OrderID, "");
            
            
        //This code to get the portfolio 
		openpos = ibc.GetPositionList(); 
		for( i = 0; ( symbol = StrExtract( openpos, i ) ) != ""; i++ ) 
		{ 
			if(symbol==Name())
			{
			positioninfo=positioninfo+"Position " + i + "\tSymbol: " + symbol + "\tSize: " + ibc.GetPositionSize( symbol ) + "\n" + "\tAvg Price: " + ibc.GetPositionInfo(symbol, "Avg. cost") +"\n" ; 
			position  = ibc.GetPositionSize(symbol); 
			aprice = ibc.GetPositionInfo(symbol, "Avg. cost");
			averageprice=aprice; 
			totalposition=totalposition+position;
			} 
			_TRACE( positioninfo );
		}
 
		    
        if( LastValue(Buy)) 
		{ 
			if(numPositions==0) 	
			{
			
			OrderID = ibc.ModifyOrder( OrderID, Name(), "Buy", 50, "LMT", BP, 0, "Day",True );
			StaticVarSetText(VarPfx + "OrderID", OrderID); 
			StaticVarSetText(VarPfx + "lastTrade", "Buy"); 
				if(numPositions==50)  	
				{
				ibc.CancelAllPendingOrders( );
				}
			_TRACE("*** Auto Buy, positions = " + NumToStr(numPositions, 1.0));
			}
			
			
			if(numPositions==50)  	
			{
			ibc.CancelAllPendingOrders( );
					
				if(lastbuyval<StrToNum(averageprice))
				{
					OrderID = ibc.ModifyOrder( OrderID, Name(), "Buy",50, "LMT", BP, 0, "Day",True );
					StaticVarSetText(VarPfx + "OrderID", OrderID); 
					StaticVarSetText(VarPfx + "lastTrade", "Buy"); 
					if(numPositions==100)  	
					{
					ibc.CancelAllPendingOrders( );
					}
					_TRACE("*** Auto Buy, positions = " + NumToStr(numPositions, 1.0));
				}
			
				
			}
				
			if(numPositions==100)  	
			{
			ibc.CancelAllPendingOrders( );
					
				if(lastbuyval<StrToNum(averageprice))
				{
					OrderID = ibc.ModifyOrder( OrderID, Name(), "Buy",50, "LMT", BP, 0, "Day",True );
					StaticVarSetText(VarPfx + "OrderID", OrderID); 
					StaticVarSetText(VarPfx + "lastTrade", "Buy"); 
					if(numPositions==150)  	
					{
					ibc.CancelAllPendingOrders( );
					}
					_TRACE("*** Auto Buy, positions = " + NumToStr(numPositions, 1.0));
				}
					
			}
								
			else if(numPositions==150) 	
			{
				ibc.CancelAllPendingOrders( );
			_TRACE("# auto cancel, ");
			}
         }
          
		if( LastValue(Sell)) 
		{ 
		
			if(numPositions>0)
			{
				if(lastsellval>StrToNum(averageprice))
				{
					OrderID = ibc.ModifyOrder( OrderID, Name(), "Sell",50, "LMT",SP,0, "Day", True );
					StaticVarSetText(VarPfx + "OrderID", OrderID); 
					StaticVarSetText(VarPfx + "lastTrade", "Sell"); 
					_TRACE("*** Auto Sell, positions = " + NumToStr(numPositions, 1.0));
				}
				else
				{
					ibc.CancelAllPendingOrders( );
				_TRACE("# auto cancel, ");
				}
            }
		 
     
			else if(numPositions==0)
			{
			ibc.CancelAllPendingOrders( );
			_TRACE("# auto cancel, ");
			}
		} 
        
        else if( CloseAll  )
        {
            
            ibc.CancelAllPendingOrders( );
            ibc.CloseAllOpenPositions();
            StaticVarSetText(VarPfx + "lastTrade", "Close"); 
            _TRACE("# close, positions = " + NumToStr(numPositions, 1.0));
        }
        else if( CancelAll )
        {
            
            ibc.CancelAllPendingOrders( );
            _TRACE("# cancel, ");
        }
        LastTWSMsg = ibc.getLastError( 0 );
        
    // *//the following will display in the interprettion window
       
		printf("Order type: " + LastTrade +
        "\nOrder Status: " + OrderStatus + 
        "\nOrder ID: " + StaticVarGetText(VarPfx + "OrderID") + 
        "\nNum positions: " + NumToStr(ibc.GetPositionSize( Name() ),1.0,False) +
        "\nAverage Price"+averageprice +
        "\nLast TWS Msg: " + LastTWSMsg );
		printf("Size: "+ totalposition+"\tAvg Price: " +averageprice+"\n" + "\tTRADE INFO" +execinfo+"\n"+"\tPENDING INFO" +pendinginfo+"\n"+ "\tPosition INFO" +positioninfo+"\n");
   
		execlist = ibc.GetExecList(0,""); 
			for( i = 0; ( OID = StrExtract( execlist, i ) ) != ""; i++ ) 
			{ 
				if(ibc.GetExecInfo( OID, "Symbol" )==Name())
				{
				execinfo = execinfo + "\n"+OID + "\t"+ibc.GetExecInfo( OID, "Symbol" ) + "\t"+ ibc.GetExecInfo( OID, "Filled" ) + "\t" + ibc.GetExecInfo( OID, "Avg. price" ) + "\n"; 
				}
			_TRACE( execinfo );
			}
        //This code to get the portfolio 
		openpos = ibc.GetPositionList(); 
		for( i = 0; ( symbol = StrExtract( openpos, i ) ) != ""; i++ ) 
		{ 
			if(symbol==Name())
			{
			positioninfo=positioninfo+"Position " + i + "\tSymbol: " + symbol + "\tSize: " + ibc.GetPositionSize( symbol ) + "\n" + "\tAvg Price: " + ibc.GetPositionInfo(symbol, "Avg. cost") +"\n" ; 
			position  = ibc.GetPositionSize(symbol); 
			aprice = ibc.GetPositionInfo(symbol, "Avg. cost");
			averageprice=aprice; 
			totalposition=totalposition+position;
			} 
		}
 
		symbols = ibc.GetPendingList( 0, "Pending" ); //returns comma separated list of pending order IDs
		symbols = ibc.GetPendingList( 1, "Pending" ); // returns comma separated list of SYMBOLS that have pending orders
		symbols = ibc.GetPendingList( 0, "Error" );//returns list of orderids that have errors
		symbols = ibc.GetPendingList( 0, "Cancelled" );//returns cancelled orderids (please keep in mind that cancelled order are automatically removed from  the list after few seconds)
		symbols = ibc.GetPendingList( 0, "" ); // - returns list of all orderIDs present in the "pending list" (may be pending/error/cancelled/partially filled/submitted, etc)

 
		for( i = 0; ( symbol = StrExtract( symbols, i ) ) != ""; i++ ) 
		{ 
			if(symbol==Name())
			{
			pendinginfo=pendinginfo+"\nPosition " + i + "\tSymbol: " + symbol + "\tSize: " + ibc.GetPositionSize( symbol ) + "\n" + "\tAvg Price: " + ibc.GetPositionInfo(symbol, "Avg. cost") +"\n" ;  
			}
			_TRACE( pendinginfo );
		}
 
       
        printf("\n"+"Size: "+ totalposition+"\tAvg Price: " +averageprice+"\n\n");
		printf("\tTRADE INFO" +execinfo+"\n");
		printf("\tPENDING INFO" +pendinginfo+"\n");
		printf("\tPENDING INFO" +positioninfo+"\n"); 
       
        
    }
    else // ConnectedStatus == 0 OR ConnectedStatus == 1, lost connection
    {
        // handle commection errors 
        if(ConnectedStatus == 0) stat = "Not Connected."; else if(ConnectedStatus == 1) stat = "Lost Connection.";
        SetChartBkColor( colorYellow);      
    // the following will display in the interprettion window
        printf("\nTWS Status: " + stat + "\n"); 
    }
} // end auto trading loop
else
{
    SetChartBkColor( colorTan);
    // the following will display in the interprettion window
    printf("\n1. Autotrading is turned off\n" + "2. TWS not started." );
}
 
_SECTION_END();


