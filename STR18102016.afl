// list 0: SPY, index based trading both momentum and reversion
//list 1 nd 2 : mean reversion and pairs trading 
// list 3: when oil is in trend, so only momentum strategy
// lis 4: any sector ETF in trend so  only momentum strategy

OptimizerSetEngine("cmae"); // you can also use "spso" or "trib" here


_SECTION_BEGIN("Trading Set up");
//Filename = _DEFAULT_NAME();
SubmitOrders = True; 
Tracing = False;    
MarketON=093000; TradeON = 094000; TradeOFF =153000; MarketOFF=160000; LM=155500;
US_ON = TimeNum() >= 093000 AND TimeNum() <=160000;
US_OFF = TimeNum() > 160000 ;//day's over*/
US_Trade_On=TimeNum() >= 094000 AND TimeNum() <=153000;
MarketLM=TimeNum() >=155500 AND Now( 4 )<=160000;
ABName=Name();//getfndata("Alias");
//IBName =Name();//getfndata("Alias");
//target_pro=1.001;//Optimize("target_profit",1.0005,1.0003,1.01,0.0005 );
_SECTION_END();



_SECTION_BEGIN("SPY-Variables");
sentiment_SPY=ParamList("sentiment", "N|NeU|P", 1);
rating_SPY=ParamList("rating", "Z|O|TW|TH|F", 2);
manualON_SPY_P=ParamList("manual on SPY", "0|1", 0);
MOM_RAN=ParamList("Momentum or Range", "0|1", 0); // range will be output from daily analysis. 

SetForeign("SPY");
O_SPY = O;
H_SPY = H;
L_SPY = L;
C_SPY = C;
v_SPY = IIf(V>0,Volume,1);
SP_SPY=O_SPY[0];
RestorePriceArrays();
// # weekly High OR Low is range. SL OR profit target above this point. if price in this range then RANGE 
L_W_SPY=TimeFrameGetPrice( "L", inWeekly, -1 ); 
H_W_SPY=TimeFrameGetPrice( "H", inWeekly, -1 ); 
// # price above Yesterday closing is TRADING ON for long and triger of short sell  
C_YDay_SPY = TimeFrameGetPrice("C_SPY", inDaily, -1); // yesterdays close https://www.amibroker.com/guide/h_timeframe.html

C_5Min_SPY=TimeFrameGetPrice("C_SPY", in5minute, -1);// TimeFrameExpand( ma5_13, in5Minute)
C_hour_SPY=TimeFrameGetPrice("C_SPY",inHourly, -1);// TimeFrameExpand( ma5_13, in5Minute)
L_5Min_SPY=TimeFrameGetPrice("L_SPY",in5minute, -1);// TimeFrameExpand( ma5_13, in5Minute)
H_5min_SPY=TimeFrameGetPrice("H_SPY",in5minute,-1);
H_Min_SPY=TimeFrameGetPrice("H_SPY", in1minute, -1);// TimeFrameExpand( ma5_13, in5Minute)
C_Min_SPY=TimeFrameGetPrice("C_SPY", in1minute, -1);// TimeFrameExpand( ma5_13, in5Minute)
_SECTION_END();

_SECTION_BEGIN("UWTI-Variables");
SetForeign("UWTI");
O_UWTI = O;
C_UWTI = C;
H_UWTI = H;
L_UWTI = L;
V_UWTI=IIf(V>0,Volume,1);

RestorePriceArrays();

C_5Min_UWTI=TimeFrameGetPrice("C_UWTI", in5minute, -1);// TimeFrameExpand( ma5_13, in5Minute)
C_hour_UWTI=TimeFrameGetPrice("C_UWTI",inHourly, -1);// TimeFrameExpand( ma5_13, in5Minute)

_SECTION_END();

_SECTION_BEGIN("OPTIMIZATION");
//##//SPY//
//const_SPY =Optimize("const",3,0.5, 5, 0.1 );
const =3.6;
//ADX_L_SPY=Optimize("ADX_L",35,15,65,1 );
ADX_L_SPY=48;
//ST_SPY=Optimize("ST",15,10,25,1 );
ST=15;
//MT_SPY=Optimize("MT",40,30,50,1 );
MT=30;
//inv_SPY=Optimize("investment",45000,30000,60000,1000 );
inv_SPY=45000;
_SECTION_END();

_SECTION_BEGIN("PIVOT points");

//Pivot points
price=(H_SPY+L_SPY+Ref(C_SPY,-1))/3;
R1=price*2-L_SPY;
R2=price+(H_SPY-L_SPY);
S1=price*2-H_SPY;
S2=price-(H_SPY-L_SPY);

//tradinging line
TodayVolume = Sum(v_SPY,MT);
average = (Ref(H_SPY,-1)+Ref(L_SPY,-1)+Ref(O_SPY,-1)+Ref(C_SPY,-1))/4;
VWAP = Sum (average * v_SPY,MT ) / TodayVolume;

//Sell Cover line
SD=StDev(O_SPY,ST);
UL=price +1*SD;
LL=price -1*SD;
SL=price +2*SD;
BL=price -2*SD;
_SECTION_END();

_SECTION_BEGIN("SPY STRATEGY");

Buy=(Cross(VWAP,R1) OR Cross(BL,VWAP)) AND InWatchList(1);
Sell=(Cross(VWAP,R2) OR Cross(VWAP,LL)) AND InWatchList(1);
Short=(Cross(S1,VWAP) OR Cross(VWAP,SL)) AND InWatchList(1);
Cover=(Cross(S2,VWAP) OR Cross(UL,VWAP)) AND  InWatchList(1);

_SECTION_END();


_SECTION_BEGIN("SIgnal-Profit line");
//e = Equity(1);
e = Equity(1,0);
start = ParamDate( "Start Date", "2016-07-01" );
end=ParamDate("End Date", "2016-10-12" );
//e=Equity(1,3,start,end); //Calculates for the Date Specific Quotes 
Lprofit = e - ValueWhen( Buy, e); 
Sprofit = e - ValueWhen( Short, e); 
//stoploss=(e<14900 OR C<YDayC*0.995);//NOT USED 
Buy=ExRem(Buy,Sell);
sell=ExRem(Sell,Buy);
short=ExRem(Short,cover);
cover=ExRem(cover,Short);
LastBuy = LastValue(Buy);
LastShort = LastValue(Short);
LastSell = LastValue(Sell);
LastCover = LastValue(Cover);
//above last value for exploration, again used in TRIGGER section
//sell-cover can not be executed all as another step of restriction inside TRIGGER section
_SECTION_END();

_SECTION_BEGIN("PLOT"); 

Plot(O_SPY, "Open", IIf( Flip(Buy or cover,Sell OR short), colorlime,  colorred), styleline);
Plot(VWAP,"VWAP",colorLightYellow,styleline);

PlotShapes(IIf(Buy, shapeHollowCircle, shapeNone),colorGreen, 0,L, Offset=-50);
PlotShapes(IIf(Short,shapeHollowCircle, shapeNone),colorRed, 0, H, Offset=40);
//Plot(e,"Equity",colorlightBlue,styleLeftAxisScale);
PlotShapes(IIf(Cover,shapeHollowCircle, shapeNone),colorLightGrey, 0, L, Offset=-40);
PlotShapes(IIf(Sell, shapeHollowCircle, shapeNone),colorLightOrange, 0,H, Offset=50);
_SECTION_END();

ordersize=200;//LastValue(inv_SPY/C_SPY);

	

_SECTION_BEGIN("AMI-IB Trigger");
ibc = GetTradingInterface("IB");
IBcStatus = ibc.IsConnected();
IBPosSize = ibc.GetPositionSize(ABName);
IBcStatusString = WriteIf(IBCStatus==0,"TWS Not Found",WriteIf(IBCStatus==1,"Connecting to TWS",WriteIf(IBCStatus==2,"TWS OK",WriteIf(IBCStatus==3,"TWS OK (msgs)",""))));
OldOrderID = StaticVarGetText("OrderID"+ABName);
if (OldORderID == "" && (LastBuy || LastShort))
{
    StaticVarSetText("OrderID"+ABName,"DUMMY");
}
excessfundCAD=ibc.GetAccountValue("[CAD]BuyingPower");
    
if (excessfundCAD =="")
    excessfund = 0;
else
   excessfund = StrToNum(excessfundCAD);  

 AccountCutout =excessfund<10000; 
 LastOrderID = StaticVarGetText("OrderID"+ABName);
 ORderStatus="";



if( IBcStatus )
{
	OrderID = StaticVarGetText("OrderID"+ABName);
    BuyPending=ibc.IsOrderPending(OrderID);
    SellPending=ibc.IsOrderPending(OrderID);
    averageprice=ibc.GetPositionInfo(ABName, "Avg. cost");
    IBPosSize = ibc.GetPositionSize(ABName);
  	ORderStatus = ibc.GetStatus( OrderID , True );
	if( ORderStatus != "" ) StaticVarSetText("OrderStatus"+ABName,ORderStatus);
	BuyPending=ibc.IsOrderPending(OrderID);
	SellPending=ibc.IsOrderPending(OrderID);
	Min_RTS=LastValue(GetRTDataForeign("Bid",Name()))-ibc.GetPositionInfo(Name(), "Avg. cost"); 
	Min_RTC=ibc.GetPositionInfo(Name(), "Avg. cost")-LastValue(GetRTDataForeign("Bid",Name()));
	minSProfit=Min_RTS>0.06;
	minCProfit=Min_RTC>0.06;
	positionclearLong=LastValue(GetRTDataForeign("Ask",Name()))<(ibc.GetPositionInfo(Name(), "Avg. cost")-0.15) OR TimeNum()==154500;
	positionclearShort=LastValue(GetRTDataForeign("Bid",Name()))>(ibc.GetPositionInfo(Name(), "Avg. cost")+0.15) OR TimeNum()==154500;
	printf("average price:"+"\t"+averageprice+"\n");
	printf("position list:"+"\t"+IBPosSize+"\n");
	printf("min sell profit:"+"\t"+minSProfit+"\n");
	printf("min cover profit:"+"\t"+minCProfit+"\n");
	BP= IBPosSize==0 AND LastValue(MarketON) AND AccountCutout==0 AND LastBuy;
	SHP= IBPosSize==0 AND LastValue(MarketON) AND AccountCutout==0 AND LastShort ;
    SP=IBPosSize>0 AND LastValue(minSProfit) AND LastSell ;//list two for stocks, stop loss only for stocks 
	CP=IBPosSize>0 AND LastValue(minCProfit) AND LastCover;
	size=IIf( (LastBuy OR  LastShort),ordersize,abs(IBPosSize)); 
	
	buyorcov=BP OR CP OR LastValue(positionclearShort);
	sellorshort=SHP OR SP OR LastValue(positionclearLong);
    
	if(buyorcov)  //BUY
    {
		OID= ibc.PlaceOrder( Name(), "BUY",Size, "MKT",0, 0, "Day", True); 
        ORderStatus = ibc.GetStatus( OID, True);
        if(ORderStatus == "Filled"){
        StaticVarSetText("OrderID"+ABName,OID);
        }
        for (dummy=0; dummy<40; dummy++) ibc.Sleep(50);  //Usually takes up to about a second for TWS to get acknowledgement from IB
        if (SubmitOrders)
        {
            for (dummy=0; dummy<40; dummy++) ibc.Sleep(50);  //Usually takes up to about a second for TWS to get acknowledgement from IB

             tradetime=GetPerformanceCounter()/1000; 
             while ((GetPerformanceCounter()/1000 - tradetime) <5) // give up after 5 seconds
             {
                 ibc.Reconnect();  //Refreshes ibc, and gets accurate status
                 //ORderStatus = ibc.GetStatus( OID, True);
                 if (ORderStatus == "PreSubmitted" || ORderStatus == "Submitted" || ORderStatus == "Filled")
                     break;
             }
        }
                     
    }
      
  	
	
    if(sellorshort)  //SHORT SELL
    {
        OID= ibc.PlaceOrder( Name(), "SELL",Size, "MKT",0, 0, "Day", True); 
         ORderStatus = ibc.GetStatus( OID, True);
        if(ORderStatus == "Filled"){
        StaticVarSetText("OrderID"+ABName,OID);
        }
        
        //for (dummy=0; dummy<40; dummy++) ibc.Sleep(50);  //Usually takes up to about a second for TWS to get acknowledgement from IB
        if (SubmitOrders)
        {
            for (dummy=0; dummy<40; dummy++) ibc.Sleep(50);  //Usually takes up to about a second for TWS to get acknowledgement from IB

             tradetime=GetPerformanceCounter()/1000; 
             while ((GetPerformanceCounter()/1000 - tradetime) <5) // give up after 5 seconds
             {
                 ibc.Reconnect();  //Refreshes ibc, and gets accurate status
                 //ORderStatus = ibc.GetStatus( OID, True);
                 if (ORderStatus == "PreSubmitted" || ORderStatus == "Submitted" || ORderStatus == "Filled")
                     break;
             }
        }
                     
    }
    
    
    ibc.ClearList(4);//error list clearing
	/*j=0;
	for( i = 0; ( symbol = StrExtract( pendinglist, i ) ) != ""; i++ ) //pending cancellation
		{ 
			if(symbol==Name())//getfndata("Alias")
			{
			j++;
			} 
		}
	if(j>1){
		for( i = 1;i<j; i++ ){
		ibc.CancelAllPendingOrders(name());
			}
		}*/
  
  // Note LastOrderID will remain "" while waiting for price improvement so we may skip entering for the whole of the bar
  
  //Exploration
IBcStatusString = WriteIf(IBCStatus==0,"TWS Not Found",WriteIf(IBCStatus==1,"Connecting to TWS",WriteIf(IBCStatus==2,"TWS OK",WriteIf(IBCStatus==3,"TWS OK (msgs)",""))));
LastOrderID = StaticVarGetText("OrderID"+ABName);
ORderStatus = ibc.GetStatus( LastOrderID , True );
if( ORderStatus != "" ) StaticVarSetText("OrderStatus"+ABName,ORderStatus);


    }
else IBPosSize = 0;

/*Title = Filename+":"+ABName+"\n"+" Trading Mode:"+WriteIf( SubmitOrders," -Create and Transmit"," - Create Only")+"\n"+" Last Signal: "+WriteIf(LastBuy,"BUY",WriteIf
(LastShort,"SHORT","NoSignal"))+"\n"+" IB Status: "+IBcStatusString+"\n"+" Last OrderID:"+LastOrderID+","+"\n"+" OrderStatus:"+ORderStatus+WriteIf(ORderStatus=="Error",ibc.GetLastError( LastOrderID
),"")+"," + "LastTime:  "+DateTimeToStr(LastValue(DateTime()))+"\n";*/

Filter=(Buy OR Short OR Sell OR Cover) AND LastOrderID!="DUMMY";// AND  Status("lastbarinrange");
AddTextColumn(FullName(),"name",200);
AddColumn(Buy,"Buy",1.0);
AddColumn(Short,"Short",1.0);
AddColumn(Sell,"Sell",1.0);
AddColumn(Cover,"Cover",1.0);
AddColumn(IIf(SubmitOrders,Asc("Y"),Asc("N")),"Transmit",formatChar);
AddColumn(IIf(Buy OR Cover,Asc("L"),IIf(Short OR Sell,Asc("S"),Asc(" "))),"Buy/Sell",formatChar);
AddColumn(IIf(Buy,BuyPrice,ShortPrice),"Entry",1.2);
AddTextColumn(IBcStatusString,"IBC Status",100);
//AddTextColumn(LastOrderID,"LastOID",1.0);
//AddTextColumn(ORderStatus,"OrderStatus",1.0);

/*
tradeend = Sell;
profit = e - ValueWhen( Buy, e );
endprofit = IIf( tradeend , profit, 0 );
LosingTrades = LastValue( Cum( endprofit < 0 ) );
WiningTrades = LastValue( Cum( endprofit > 0 ) );
TotalTrades = LastValue( Cum( tradeend ) );
AddColumn( LosingTrades, "Losing trades", 1 );
AddColumn( WiningTrades, "Wining trades", 1 );
AddColumn( TotalTrades, "Total trades", 1 );



// now we will count the number of
// count trades winning in given $ ranges
NumRanges = 25; // number of ranges to generate
RangeSize = 100; // controls $ size of the range

for( i = 0; i < NumRanges; i++ )
{
  rangestart = i * RangeSize;
  rangeend = (i+1)*RangeSize;
  if( i == NumRanges - 1 ) rangeend = 999999;
  AddColumn(
  LastValue( 100* Cum( endprofit > rangestart AND endprofit < rangeend ) /TotalTrades ),
  "% with profit " + rangestart + ".." + rangeend );
}

for( i = 0; i < NumRanges; i++ )
{
  rangestart = (-i - 1 ) * RangeSize;
  rangeend = -i*RangeSize;
  if( i == NumRanges - 1 ) rangestart = -999999;
  AddColumn(
  LastValue( 100* Cum( endprofit > rangestart AND endprofit < rangeend ) /TotalTrades ),
  " % with loss " + rangeend + ".." + rangestart );
}

*/

/*
Filter=1;
AddColumn(C, "Close price",1.2, colorDefault, colorDefault,100);
AddColumn(YDayC, "Last Day Close",1.2, colorDefault, colorDefault,100);
AddColumn(ROC(C,5), "ROC",1.2, colorDefault, colorDefault,100);
AddColumn(ADX(10), "ADX",1.2, colorDefault, colorDefault,100);
AddColumn(SIC_spread, "SIC_spread",1.4, colorDefault, colorDefault,100);
AddColumn(angle, "angle",1.2, colorDefault, colorDefault,100);
AddColumn(slope, "slope",1.4, colorDefault, colorDefault,100);
AddColumn(hist, "hist",1.2, colorDefault, colorDefault,100);
AddColumn(Percentile (SIC_spread,15, 99), "p99-SIC_spread",1.4, colorDefault, colorDefault,100);
AddColumn(Percentile (angle,15, 99), "p99-rsi",1.4, colorDefault, colorDefault,100);
AddColumn(Percentile (slope,15, 99), "p99-SLOPE",1.4, colorDefault, colorDefault,100);
AddColumn(Percentile (hist,15, 99), "p99-hist",1.4, colorDefault, colorDefault,100);
AddColumn(Percentile (SIC_spread,15,1), "p01-SIC_spread",1.4, colorDefault, colorDefault,100);
AddColumn(Percentile (angle,15,1), "p01-rsi",1.4, colorDefault, colorDefault,100);
AddColumn(Percentile (slope,15,1), "p01-SLOPE",1.4, colorDefault, colorDefault,100);
AddColumn(Percentile (hist,15,1), "p01-hist",1.4, colorDefault, colorDefault,100);
AddColumn(RSIa(SIC_spread,5), "rsi-SIC_spread",1.4, colorDefault, colorDefault,100);
AddColumn(RSIa(angle,5), "rsi-ANGLE",1.4, colorDefault, colorDefault,100);
AddColumn(RSIa(slope,5), "rsi-SLOPE",1.4, colorDefault, colorDefault,100);
AddColumn(RSIa(hist,5), "rsi-hist",1.4, colorDefault, colorDefault,100);
*/

_SECTION_END();


_SECTION_BEGIN("Alert"); 
//AlertIf( Buy, "EMAIL", "Buy Alert in "+FullName()+ "@"+BuyPrice,1 );
//AlertIf( Sell, "EMAIL", "Sell Alert in "+FullName()+ "@"+SellPrice,1 );
//AlertIf( Short, "EMAIL", "Short Alert in "+FullName()+ "@"+ShortPrice,3 );
//AlertIf( Cover, "EMAIL", "Short Alert in "+FullName()+ "@"+CoverPrice,3 );
_SECTION_END();

_SECTION_BEGIN("Volume At Price");
PlotVAPOverlay( Param("Lines", 300, 100, 1000, 1 ), Param("Width", 5, 1, 100, 1 ), ParamColor("Color", colorCycle ), ParamToggle("Side", "Left|Right" ) | 4*ParamToggle("Z-order", "On top|Behind", 1 ) );
 
_SECTION_END();

_SECTION_BEGIN("Volume1");
Plot( Volume, _DEFAULT_NAME(), ParamColor("Color", colorBlueGrey ), ParamStyle( "Style", styleHistogram | styleOwnScale | styleThick, maskHistogram  ) );
_SECTION_END();

_SECTION_BEGIN("Spread");
_N( Symbol2= ParamStr("Symbol2", "MSFT") );
Mode = ParamToggle("Mode", "Difference (Symbol1-Symbol2)|Ratio (Symbol1/Symbol2)");

SetForeign( Symbol2 );
C2 = C;
H2 = H;
L2 = L;
O2 = O;
V2 = V;
RestorePriceArrays();

Color = ParamColor( "Color", colorDefault );
Style = ParamStyle( "Style", styleLine, maskPrice );

if( Mode == 0 )
 PlotOHLC( O-O2, H-H2, L-L2, C-C2, "(" + Name()+" - "+Symbol2 + ") spread", Color, style );
else
 PlotOHLC( O/O2, H/H2, L/L2, C/C2, "(" + Name()+" / "+Symbol2 + ") spread", Color, style );

_SECTION_END();

_SECTION_BEGIN("Ichimoku");
prds = Param( "Standard Line Periods", 13, 5, 26, 1 );
turn = Param( "Turning Line Periods", 3, 3, 10, 1 );
delay = Param( "Delayed Line Periods", 12, 4, 25, 1 );
span = Param( "Spans Periods", 16, 10, 52, 1 );

TL = ( HHV( H, turn ) + LLV( L, turn ) ) / 2;
SL = ( HHV( H, prds ) + LLV( L, prds ) ) / 2;
DL = Ref( C, delay );
Sp1 = ( SL + TL ) / 2;
Sp2 = ( HHV( H, span ) + LLV( L, span ) ) / 2;

_N( Title = StrFormat( "{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) Vol " + WriteVal( V, 1.0 ) + " {{VALUES}}", O, H, L, C, SelectedValue( ROC( C, 1 ) ) ) );

Plot( C, "Close", colorDefault, styleNoTitle | GetPriceStyle() );
Plot( SL, "SL", colorRed, styleThick | styleNoLabel );
Plot( TL, "TL", colorGreen, styleThick | styleNoLabel );
color = IIf( Sp1 > Sp2, ParamColor( "Span1 Color", ColorRGB( 0, 255, 0 ) ), ParamColor( "Span2 Color", ColorRGB( 255, 104, 32 ) ) );
PlotOHLC ( Sp1, Sp1, Sp2, Sp2, "Cloud", Color, styleCloud | styleNoLabel, Null, Null, delay, -2 );
_SECTION_END();

_SECTION_BEGIN("Price");
SetChartOptions(0,chartShowArrows|chartShowDates);
_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) Vol " +WriteVal( V, 1.0 ) +" {{VALUES}}", O, H, L, C, SelectedValue( ROC( C, 1 )) ));
Plot( C, "Close", ParamColor("Color", colorDefault ), styleNoTitle | ParamStyle("Style") | GetPriceStyle() ); 
_SECTION_END();

_SECTION_BEGIN("MA");
P = ParamField("Price field",-1);
Periods = Param("Periods", 15, 2, 200, 1 );
Plot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale ); 
_SECTION_END();

_SECTION_BEGIN("Mid MA");
P = ParamField("Price field",-1);
Periods = Param("Periods", 45, 2, 300, 1 );
Plot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale ); 
_SECTION_END();

_SECTION_BEGIN("Long MA");
P = ParamField("Price field",-1);
Periods = Param("Periods", 100, 2, 400, 1 );
Plot( MA( P, Periods ), _DEFAULT_NAME(), ParamColor( "Color", colorCycle ), ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale ); 
_SECTION_END();

_SECTION_BEGIN("BBands");
P = ParamField("Price field",-1);
Periods = Param("Periods", 15, 2, 100, 1 );
Width = Param("Width", 2, 0, 10, 0.05 );
Color = ParamColor("Color", colorLightGrey );
Color = ColorBlend( Color,  GetChartBkColor(), 0.5 );
Style = ParamStyle("Style", styleLine | styleNoLabel ) | styleNoRescale;;
Plot( bbt = BBandTop( P, Periods, Width ), "BBTop" + _PARAM_VALUES(), Color, Style ); 
Plot( bbb = BBandBot( P, Periods, Width ), "BBBot" + _PARAM_VALUES(), Color, Style ); 
PlotOHLC( bbt, bbt, bbb, bbb, "", ColorBlend( Color, GetChartBkColor(), 0.7 ), styleNoLabel | styleCloud | styleNoRescale, Null, Null, Null, -1 );
_SECTION_END();

_SECTION_BEGIN("Volume");
Color = ParamColor("Color", ColorRGB( 128, 128, 192 ) );
Plot( Volume, _DEFAULT_NAME(), ColorBlend( Color, GetChartBkColor(), 0.5  ), styleNoTitle | ParamStyle( "Style", styleHistogram | styleOwnScale | styleThick | styleNoLabel, maskHistogram  ), 2 );
_SECTION_END();

_SECTION_BEGIN("Price Interpretation");
movshort = ParamField("Short Time MA", 8 );
movmed = ParamField("Mid Time MA", 9 );
movlong = ParamField("Long Time MA", 10 );
btop = ParamField("BBTop", 11 );
bbot = ParamField("BBBottom", 12 );
if( Status("action") == actionCommentary )
{
width = btop - bbot;
lslop = LinRegSlope( C, 30 ) + 100;
lslo = LLV( lslop, 90 );
lshi = HHV( lslop, 90 );
lswidth = lshi - lslo;
trend = 100*( lslop - lslo )/lswidth;

mawidth = MA( width, 100 );
relwidth = 100*(width - mawidth)/mawidth;

_N( tname = Name()+"("+FullName()+")" );

printf("Price and moving averages:\n");
printf( tname + " has closed " + WriteIf( C > movshort, "above" , "below" ) + " its Short time moving average. ");

printf("\nShort time moving average is currently " + WriteIf( movshort > movmed, "above", "below") + " mid-time, AND " + WriteIf( movshort > movlong, "above", "below" ) + " long time moving averages.");

printf("\nThe relationship between price and moving averages is: "+
WriteIf( C > movshort AND movshort > movmed, "bullish",
WriteIf( C < movshort AND movshort < movmed, "bearish", "neutral" ) ) + " in short-term, and "+
WriteIf( movshort > movmed AND movmed > movlong , "bullish",
WriteIf( movshort < movmed AND movmed < movlong, "bearish", "neutral" ) ) + " in mid-long term. ");

printf("\n\nBollinger Bands:\n");
printf(tname+ " has closed " + 
WriteIf( C < bbot, "below the lower band by " +
WriteVal( 100 *( bbot-C )/ width, 1.1 ) + "%%. " +
WriteIf( trend < 30, " This combined with the steep downtrend can suggest that the downward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",
WriteIf( trend > 30 AND trend < 70, "Although prices have broken the lower band and a downside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +

WriteIf( C > btop, "above the upper band by " +
WriteVal( 100 *( C- btop )/ width, 1.1 ) + "%%. " +
WriteIf( trend > 70, " This combined with the steep uptrend suggests that the upward trend in prices has a good chance of continuing.  However, a short-term pull-back inside the bands is likely.",
WriteIf( trend > 30 AND trend < 70, "Although prices have broken the upper band and a upside breakout is possible, the most likely scenario for "+tname+" is to continue within current trading range.", "" ) ), "" ) +

WriteIf( C < btop AND ( ( btop - C ) / width ) < 0.5, 
"below upper band by " +
WriteVal( 100 *( btop - C )/ width, 1.1 ) + "%%. ", 
WriteIf( C < btop AND C > bbot , "above bottom band by " +
WriteVal( 100 *( C - bbot )/ width, 1.1 ) + "%%. ", "" ) ));

printf("\n"+
WriteIf( ( trend > 30 AND trend < 70 AND ( C > btop OR C < bbot ) ) AND abs(relwidth) > 40,
		 "This picture becomes somewhat unclear due to the fact that Bollinger Bands are  currently",
		 "Bollinger Bands are " )+	  
WriteVal( abs( relwidth ), 1.1 ) + "%% " +
WriteIf( relwidth > 0, "wider" , "narrower" ) +
" than normal.");

printf("\n");

printf(
WriteIf( abs( relwidth ) < 40, "The current width of the bands (alone) does not suggest anything conclusive about the future volatility or movement of prices.","")+
WriteIf( relwidth < -40, "The narrow width of the bands suggests low volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility increasing with a sharp price move has increased for the near-term. "+
"The bands have been in this narrow range for " + WriteVal(BarsSince(Cross(-40,relwidth)),1.0) + " bars. The probability of a significant price move increases the longer the bands remain in this narrow range." ,"")+
WriteIf( relwidth > 40, "The large width of the bands suggest high volatility as compared to " + tname + "'s normal range.  Therefore, the probability of volatility decreasing and prices entering (or remaining in) a trading range has increased for the near-term. "+
"The bands have been in this wide range for  " + WriteVal(BarsSince(Cross(relwidth,40)),1.0) + " bars.The probability of prices consolidating into a less volatile trading range increases the longer the bands remain in this wide range." ,""));

printf("\n\nThis commentary is not a recommendation to buy or sell. Use at your own risk.");
}
_SECTION_END();
